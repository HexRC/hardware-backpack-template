// 8-bit CRC implementation
//
// Copyright (c) 2013, Matthijs Kooijman <matthijs@stdin.nl>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in
// all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
// THE SOFTWARE.

#include "crc.h"

/* Generic CRC implementation, based on code generated by pycrc, using:
 * pycrc --width=8  --xor-in=0 --reflect-in=false --reflect-out=false --xor-out=0  --algorithm=bit-by-bit-fast --generate=c
 * poly parameter is the poly in hexadecimal form, "rocksoft" style
 * (translating the polynomial into a binary number, dropping the
 * topmost 1-bit).
 */
uint8_t crc_update(const uint8_t poly, uint8_t crc, uint8_t data)
{
    unsigned int i;
    bool bit;

    for (i = 0x80; i > 0; i >>= 1) {
        bit = crc & 0x80;
        if (data & i) {
            bit = !bit;
        }
        crc <<= 1;
        if (bit) {
            crc ^= poly;
        }
    }
    return crc;
}

